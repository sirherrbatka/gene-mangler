(cl:in-package #:gene-mangler.graph-data)

(prove:plan 32)

(let* ((linear-graph (build-graph
                     ()
                     ((a) (b) (c) (d))
                     ((a b) (b c) (c d))))
       (first-node (~> linear-graph nodes (aref 0)))
       (last-node (~> linear-graph nodes (aref 3)))
       (path (shortest-path linear-graph first-node last-node)))
  (prove:isnt path nil)
  (let* ((path-nodes (nodes path)))
    (prove:is (length path-nodes) 4)
    (prove:is (aref path-nodes 0) first-node)
    (prove:is (aref path-nodes 3) last-node)))

(let* ((linear-graph (build-graph
                      ()
                      ((a) (b) (c) (d))
                      ((a b) (b c) (c d))))
       (all-nodes (nodes linear-graph)))
  (let ((reachable-nodes (reachable-nodes (aref all-nodes 0))))
    (prove:is (length reachable-nodes) 4)
    (prove:is (aref reachable-nodes 0) (aref all-nodes 0))
    (prove:is (aref reachable-nodes 1) (aref all-nodes 1))
    (prove:is (aref reachable-nodes 2) (aref all-nodes 2))
    (prove:is (aref reachable-nodes 3) (aref all-nodes 3))))

(let* ((linear-graph (build-graph
                      ()
                      ((a) (b) (c) (d))
                      ((a b) (b c) (c d))))
       (all-nodes (nodes linear-graph))
       (first-node (aref all-nodes 0))
       (last-node (aref all-nodes 3))
       (path (shortest-path linear-graph first-node last-node))
       (edges (edges path)))
  (prove:is (length edges) 3)
  (break-edge! (aref edges 1))
  (let ((reachable-from-first (reachable-nodes first-node))
        (reachable-from-last (reachable-nodes last-node)))
    (prove:is (length reachable-from-last) 2)
    (prove:is (length reachable-from-first) 2)
    (prove:is (aref reachable-from-first 0) (aref all-nodes 0))
    (prove:is (aref reachable-from-first 1) (aref all-nodes 1))
    (prove:is (aref reachable-from-last 0) (aref all-nodes 3))
    (prove:is (aref reachable-from-last 1) (aref all-nodes 2))))

(let* ((linear-graph (build-graph
                      ()
                      ((a) (b) (c) (d))
                      ((a b) (b c) (c d))))
       (all-nodes (nodes linear-graph))
       (clone (clone linear-graph))
       (cloned-nodes (nodes clone)))
  (prove:is (length cloned-nodes) (length all-nodes))
  (prove:isnt (aref all-nodes 0) (aref cloned-nodes 0))
  (prove:isnt (aref all-nodes 1) (aref cloned-nodes 1))
  (prove:isnt (aref all-nodes 2) (aref cloned-nodes 2))
  (prove:isnt (aref all-nodes 3) (aref cloned-nodes 3)))

(let* ((linear-graph (build-graph
                      ()
                      ((a) (b) (c) (d))
                      ((a b) (b c) (c d))))
       (mixer (make 'graph-cutset-mixer))
       (fragments (cutset mixer linear-graph)))
  (prove:is (length fragments) 2)
  (prove:ok (every (lambda (fragment)
                     (< (~> fragment nodes length) 4))
                   fragments))
  (prove:is (sum fragments :key (compose #'length #'nodes)) 4)
  (prove:ok (every (lambda (fragment)
                     (= (~> fragment nodes first-elt reachable-nodes length)
                        (~> fragment nodes length)))
                   fragments))
  (let* ((combined-graph (combine-fragments mixer (aref fragments 0) (aref fragments 1)))
         (all-nodes (nodes combined-graph)))
    (prove:is (length all-nodes) 4)))

(let* ((circular-graph (build-graph
                        ()
                        ((a) (b) (c) (d))
                        ((a b) (b c) (c d) (d a))))
       (mixer (make 'graph-cutset-mixer))
       (fragments (cutset mixer circular-graph)))
  (prove:is (length fragments) 2)
  (prove:ok (every (lambda (fragment)
                     (~> fragment broken-edges length (= 2)))
                   fragments))
  (prove:ok (every (lambda (fragment)
                     (< (~> fragment nodes length) 4))
                   fragments))
  (prove:is (sum fragments :key (compose #'length #'nodes))
            4)
  (prove:ok (every (lambda (fragment)
                     (= (~> fragment nodes first-elt reachable-nodes length)
                        (~> fragment nodes length)))
                   fragments))
  (let* ((combined-graph (combine-fragments mixer (aref fragments 0) (aref fragments 1)))
         (all-nodes (nodes combined-graph)))
    (prove:is (length all-nodes) 4)))

(prove:finalize)
